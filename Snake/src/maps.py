from typing import Dict, List
from constants import Position, DIRECTIONS


class Map():
    def __init__(self, map: List[List[bool]], snake: List[Position], starting_direction: Position, fruits: int, speed: float = 1):
        self.map = map
        self.snake = snake
        self.starting_direction = starting_direction
        self.fruits = fruits
        self.speed = speed

    @staticmethod
    def map_from_string(map: str) -> List[List[bool]]:
        return [[c == "." for c in row] for row in map.split("\n")]

MAPS: Dict[str, Map] = {
    "plain": Map(Map.map_from_string(
            "....................\n" * 19 + \
            "...................."),
        snake=[(0, 2), (0, 1)],
        starting_direction=DIRECTIONS.RIGHT,
        fruits=2,
        speed=5),

    "labyrint": Map(Map.map_from_string(
            "..........................\n"
            "..######################..\n"
            "..#....................#..\n"
            "..#.##..##########..##.#..\n"
            "..#.#................#.#..\n"
            "..#.#......#..#......#.#..\n"
            "..#.#.######..######.#.#..\n"
            "..#.#................#.#..\n"
            "..#.#......#..#......#.#..\n"
            "..#.########..########.#..\n"
            "..#....................#..\n"
            "..######..######..######..\n"
            "..#....#..#....#..#....#..\n"
            "....##.#....##....#.##....\n"
            "..#.##....#.##.#....##.#..\n"
            "..#....#..#....#..#....#..\n"
            "..######..######..######..\n"
            "..#....................#..\n"
            "..#.########.........#.#..\n"
            "..#........####......#.#..\n"
            "..#.#.........#......#.#..\n"
            "..#.########..########.#..\n"
            "..#.#......#.........#.#..\n"
            "..#.#......####........#..\n"
            "..#.#.........########.#..\n"
            "..#....................#..\n"
            "..######################..\n"
            ".........................."),
        snake=[(0, 2), (0, 1)],
        starting_direction=DIRECTIONS.RIGHT,
        fruits=10,
        speed=0.5),

    "eggs": Map(
        Map.map_from_string(
            "....................\n"
            "....................\n"
            "..################..\n"
            "..#..............#..\n"
            "..#.############.#..\n"
            "..#.#..........#.#..\n"
            "..#.#.########.#.#..\n"
            "..#.#.#......#.#.#..\n"
            "....................\n"
            "..#.#.#......#.#.#..\n"
            "..#.#.########.#.#..\n"
            "..#.#..........#.#..\n"
            "..#.############.#..\n"
            "..#..............#..\n"
            "....############....\n"
            "..#..............#..\n"
            "....############....\n"
            "..#..............#..\n"
            "..#.############.#..\n"
            "..#.#..........#.#..\n"
            "..#.#.########.#.#..\n"
            "..#.#.#......#.#.#..\n"
            "....................\n"
            "..#.#.#......#.#.#..\n"
            "..#.#.########.#.#..\n"
            "..#.#..........#.#..\n"
            "..#.############.#..\n"
            "..#..............#..\n"
            "..################..\n"
            "....................\n"
            "...................."),
        snake=[(1, 2), (1, 1)],
        starting_direction=DIRECTIONS.RIGHT,
        fruits=4),

    "squares": Map(
        Map.map_from_string(
            "....................\n"
            "....................\n"
            "..#######..#######..\n"
            "..#..............#..\n"
            "..#..............#..\n"
            "..#..####..####..#..\n"
            "..#..#........#..#..\n"
            "..#..#........#..#..\n"
            "..#..#..####..#..#..\n"
            "........####........\n"
            "........####........\n"
            "..#..#..####..#..#..\n"
            "..#..#........#..#..\n"
            "..#..#........#..#..\n"
            "..#..####..####..#..\n"
            "..#..............#..\n"
            "..#..............#..\n"
            "..#######..#######..\n"
            "....................\n"
            "...................."),
        snake=[(1, 2), (1, 1)],
        starting_direction=DIRECTIONS.RIGHT,
        fruits=2),

    "geometrics": Map(
        Map.map_from_string(
            "...............................\n"
            "...................######......\n"
            "..######.#######..#......#.....\n"
            "..#............#.#..####..#....\n"
            "..#.####..##...#...........#...\n"
            "..#.####..##........####....#..\n"
            "..#..........#.#.#..........#..\n"
            "..######....#..#..#....####....\n"
            "...........#...#...#........#..\n"
            "..#.###........#....#..###..#..\n"
            "..#.###..#.....#.....#.....#...\n"
            "..#.###.#......#.#....#...#....\n"
            "..#............#..#......#.....\n"
            "..#########.####...##.##.......\n"
            ".........................#.....\n"
            "....#..#####......#####...#....\n"
            "...##.....................##...\n"
            "..#############.#############..\n"
            "...............................\n"
            "..............................."),
        snake=[(1, 2), (1, 1)],
        starting_direction=DIRECTIONS.RIGHT,
        fruits=10),

        "skull": Map(
        Map.map_from_string(
                "######............######\n"
                "####................####\n"
                "###......######......###\n"
                "##....############....##\n"
                "#....##############....#\n"
                "....################....\n"
                "...###...######...###...\n"
                "..###.....####.....###..\n"
                "..###..............###..\n"
                "..........#..#..........\n"
                "..###.....#..#.....###..\n"
                "..####...#....#...####..\n"
                "..########....########..\n"
                "..####################..\n"
                "..####################..\n"
                "...##..##..##..##..##...\n"
                "...##..##..##..##..##...\n"
                "........................\n"
                "#....##..##..##..##....#\n"
                "##...##..##..##..##...##\n"
                "##....############....##\n"
                "###...############...###\n"
                "###.....########.....###\n"
                "####................####\n"
                "######............######"),
        snake=[(17, 3), (17, 4)],
        starting_direction=DIRECTIONS.RIGHT,
        fruits=3),

}
